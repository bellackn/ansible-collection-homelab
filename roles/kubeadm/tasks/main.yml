---
- name: Include variables
  ansible.builtin.include_vars: "{{ ansible_distribution | lower }}.yml"

- name: Disable swap
  ansible.builtin.command: swapoff -a
  changed_when: false

- name: Delete swap entry from fstab
  ansible.posix.mount:
    path: none
    fstype: swap
    state: absent

- name: Map CPU architecture facts to their correct values
  ansible.builtin.set_fact:
    _architecture: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"

- name: Install required system packages
  ansible.builtin.apt:
    name: "{{ _kubeadm_req_packages }}"
    state: present

- name: Install cri-dockerd
  ansible.builtin.include_tasks: cri-dockerd.yml

- name: Enable required kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop:
    - br_netfilter
    - overlay

- name: Update kernel networking to allow K8s traffic
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  loop:
    - {name: net.bridge.bridge-nf-call-ip6tables, value: 1}
    - {name: net.bridge.bridge-nf-call-iptables, value: 1}
    - {name: net.ipv4.ip_forward, value: 1}

- name: Add all hosts to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[item].ansible_facts.default_ipv4.address }} {{ item }}"
    state: present
  loop: "{{ ansible_play_hosts }}"

- name: Determine major Kubernetes version
  ansible.builtin.set_fact:
    _k8s_major_version: "{{ kubeadm_k8s_version.split('.')[:2] | join('.') }}"

- name: Download Kubernetes GPG key
  ansible.builtin.get_url:
    url: "https://pkgs.k8s.io/core:/stable:/v{{ _k8s_major_version }}/deb/Release.key"
    dest: /tmp/k8s-release.key
    mode: "0644"

- name: Import Kubernetes GPG key  # noqa yaml[line-length]
  ansible.builtin.shell:
    cmd: set -o pipefail && cat /tmp/k8s-release.key | gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    executable: /bin/bash
  changed_when: false

- name: Add Kubernetes apt repository  # noqa yaml[line-length]
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ _k8s_major_version }}/deb/ /"
    state: present

- name: Install Kubernetes tools
  ansible.builtin.apt:
    update_cache: true
    name:
      - kubelet
      - kubeadm
      - kubectl

- name: Prevent updates for Kubernetes tools
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Create .kube directory
  ansible.builtin.file:
    path: /home/{{ item }}/.kube
    state: directory
    mode: "0755"
    owner: "{{ item }}"
    group: "{{ item }}"
  loop: "{{ ['root'] | union(kubeadm_additional_users) }}"

- name: Make K8s admin config available for users on the head node
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    remote_src: true
    dest: /home/{{ item }}/.kube/config
    mode: "0600"
    owner: "{{ item }}"
    group: "{{ item }}"
  loop: "{{ ['root'] | union(kubeadm_additional_users) }}"
  when: inventory_hostname == kubeadm_k8s_head_node

- name: Enable bash-completion and `k` alias for kubectl
  ansible.builtin.blockinfile:
    block: |
      source <(kubectl completion bash)
      alias k=kubectl
      complete -F __start_kubectl k
    dest: "{{ '/root' if item == 'root' else '/home/' + item }}/.bashrc"
    state: present
  loop: "{{ ['root'] | union(kubeadm_additional_users) }}"

- name: Start kubelet
  ansible.builtin.systemd_service:
    name: kubelet
    state: started
    enabled: true

- name: Deploy kubeadm-config.yml
  ansible.builtin.template:
    src: kubeadm-config.yml.j2
    dest: "{{ ansible_env.HOME }}/kubeadm-config.yml"
    mode: '0644'
  when: inventory_hostname == kubeadm_k8s_head_node

- name: Set up Cilium
  ansible.builtin.import_tasks: cilium.yml
  when: inventory_hostname == kubeadm_k8s_head_node

- name: Finish
  ansible.builtin.debug:
    msg:
      - The K8s hosts are now ready.
      - You can now SSH into {{ kubeadm_k8s_head_node }} and run `kubeadm init`.
      - Follow the instructions from there.
      - To install Cilium, run `kubectl apply -f ~/cilium.yml`.
  run_once: true
